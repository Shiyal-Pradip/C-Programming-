void Conditions();
void Blue_Partition();
void Black_Partition();
void Border();
void Player();
void Fruit_Position();

int  Fruit=0;//Fruits
int  X=10,Y=20; // Player
long Score=0;

void Conditions()
{
	if(X==52 && Y==3)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==30 && Y==7)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==3 && Y==14)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==10 && Y==2)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==15 && Y==17)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==40 && Y==20)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==17 && Y==10)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==40 && Y==13)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==30 && Y==16)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==52 && Y==15)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==20 && Y==14)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==45 && Y==8)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==2 && Y==23)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==25 && Y==21)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==59 && Y==21)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==27 && Y==12)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==2 && Y==2)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==8 && Y==8)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==10 && Y==20)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==20 && Y==6)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
	else if(X==59 && Y==2)
		{
			Black_Partition();
			Player();
			Fruit++;
			Fruit_Position();
			Score++;
			Blue_Partition();
		}
}